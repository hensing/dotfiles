#!/usr/bin/python
# coding: utf-8
"""
    Script to find and select files matching regular expression
"""
from __future__ import print_function
__author__ = 'Henning Dickten'


import argparse
import re
import os
import sys
import fnmatch
import subprocess
import mailcap
import mimetypes

#PATH = '/media/freenas/pappos'
PATH = '/home/hensing/ownCloud/pappos'


def parse_args(argv=None):
    """
    Parser für die Console
    """
    if argv is None:
        argv = sys.argv

    parser = argparse.ArgumentParser()

    parser.add_argument('regex', metavar='regex', nargs='+',
                        help='search expression')

    parser.add_argument('-o', '--or', dest='logic',
                        default=set.intersection,
                        action='store_const', const=set.union,
                        help='match pattern1 OR pattern2 OR pattern3…')

    parser.add_argument('-m', '--mendeley', dest='mendeley',
                        action='store_true',
                        help='open in Mendeley Desktop')

    parser.add_argument('-r', '--raw', dest='raw',
                        action='store_true',
                        help='use raw expression (without additional *)')

    args = parser.parse_args()
    return args


def find_paper(expressions, logic, use_raw=False):
    """
    Returns a list of files matching expression
    """
    results = []

    compiled_expressions = []

    # compile regex
    for expression in expressions:
        if use_raw is False:
            expression = '*' + expression.strip('*') + '*'

        compiled_expressions.append(
            re.compile(fnmatch.translate(expression), re.IGNORECASE))

    # search for files
    for root, _, files in os.walk(PATH, topdown=True):

        temp_res = []
        # filter with regex
        for reg_expr in compiled_expressions:
            temp_res.append(set((os.path.join(root, i)
                                 for i in files if re.match(reg_expr, i))))

        # combine results (union or intersection):
        results += logic(*temp_res)

    results.sort()
    return results


def open_paper(fname, args):
    """
    opens a paper
    """
    if args.mendeley is True:
        exe = "/usr/bin/mendeleydesktop '%s'"
    else:
        caps = mailcap.getcaps()
        mime = mimetypes.guess_type(fname)[0]
        exe = mailcap.findmatch(caps, mime)[1]['view']

    subprocess.Popen(exe % fname, shell=True)


def main():
    "the main routine"
    args = parse_args()
    results = find_paper(args.regex, args.logic, args.raw)

    if len(results) == 0:
        print('nothing found for {}. Exit.'.format(' ∨ '.join(args.regex)))
        sys.exit(1)

    print('Results for "{}:"\n'.format(' ∨ '.join(args.regex)))
    for res_num, res in enumerate(results):
        print('{: >4}: {}'.format(res_num + 1, res.lstrip(PATH)))

    # select paper
    while True:
        selected = raw_input('select paper; \'a\' for all or \'q\' to quit> ')
        # exit
        if selected == 'q' or selected == '':
            sys.exit(0)

        # open all
        elif selected == 'a':
            for fname in results:
                open_paper(fname, args)
            sys.exit(1)

        # number selected
        else:
            try:
                open_paper(results[int(selected) - 1], args)
            except IndexError:
                print('paper number out of range.')

if __name__ == '__main__':
    main()
